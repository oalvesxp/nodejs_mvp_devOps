name: Pipeline Deploy ECS

on:
  push:
    branches:
      - develop

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}

jobs:
  unit:
    name: Automated Tests
    uses: ./.github/workflows/run-unit-tests.yml
    
  integration:
    name: Automated Tests
    uses: ./.github/workflows/run-integration-tests.yml
    secrets:
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  
  build:
    name: Generate Backend Package
    needs: [unit, integration]
    runs-on: ubuntu-22.04
    defaults: 
      run:
        working-directory: 'services/api'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js ${{ vars.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION }}
          cache: npm
          cache-dependency-path: 'services/api/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Package
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: services/api/build
    
  backend:
    name: 'Backend: Package + Deploy Hotfix'
    needs: build
    runs-on: ubuntu-22.04
    defaults: 
      run:
        working-directory: 'services/api'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Build Artifact
        id: artifact
        uses: actions/download-artifact@v4
        with:
          name: api
          path: services/api/build
      
      - name: Debug
        run: ls -la

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login on Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag and Push Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mvp-be-repo
          IMAGE_TAG: v${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: 'backend-task'
          container-name: 'backend'
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: 'backend-service'
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  frontend:
    name: 'Frontend: Package + Deploy Hotfix'
    needs: build
    runs-on: ubuntu-22.04
    defaults: 
      run:
        working-directory: 'services/webapp'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login on Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag and Push Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mvp-fe-repo
          IMAGE_TAG: v${{ github.run_number }}
          REACT_APP_API_URL: "http://mvp-ecs-alb-1788440207.us-east-1.elb.amazonaws.com"
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: 'frontend-task'
          container-name: 'frontend'
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: 'frontend-service'
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true