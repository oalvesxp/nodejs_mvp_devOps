/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Flash Tasks API
 * OpenAPI spec version: 1.4.1
 */
import type {
  CompleteTask200,
  CreateTask201,
  CreateTaskBody,
  DeleteTask204,
  FetchTasks200,
  GetTask200,
  UpdateTask204,
  UpdateTaskBody
} from '../api.schemas'

/**
 * Register a new task
 */
export type createTaskResponse = {
  data: CreateTask201;
  status: number;
  headers: Headers;
}

export const getCreateTaskUrl = () => {


  return `http://mvp-ecs-alb-1788440207.us-east-1.elb.amazonaws.com:3000/tasks/`
}

export const createTask = async (createTaskBody: CreateTaskBody, options?: RequestInit): Promise<createTaskResponse> => {
  
  const res = await fetch(getCreateTaskUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createTaskBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}


/**
 * Fetch tasks
 */
export type fetchTasksResponse = {
  data: FetchTasks200;
  status: number;
  headers: Headers;
}

export const getFetchTasksUrl = () => {


  return `http://mvp-ecs-alb-1788440207.us-east-1.elb.amazonaws.com:3000/tasks/`
}

export const fetchTasks = async ( options?: RequestInit): Promise<fetchTasksResponse> => {
  
  const res = await fetch(getFetchTasksUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}


/**
 * Get task
 */
export type getTaskResponse = {
  data: GetTask200;
  status: number;
  headers: Headers;
}

export const getGetTaskUrl = (id: string,) => {


  return `http://mvp-ecs-alb-1788440207.us-east-1.elb.amazonaws.com:3000/tasks/${id}`
}

export const getTask = async (id: string, options?: RequestInit): Promise<getTaskResponse> => {
  
  const res = await fetch(getGetTaskUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}


/**
 * Update task
 */
export type updateTaskResponse = {
  data: UpdateTask204;
  status: number;
  headers: Headers;
}

export const getUpdateTaskUrl = (id: string,) => {


  return `http://mvp-ecs-alb-1788440207.us-east-1.elb.amazonaws.com:3000/tasks/${id}`
}

export const updateTask = async (id: string,
    updateTaskBody: UpdateTaskBody, options?: RequestInit): Promise<updateTaskResponse> => {
  
  const res = await fetch(getUpdateTaskUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateTaskBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}


/**
 * Delete task
 */
export type deleteTaskResponse = {
  data: DeleteTask204;
  status: number;
  headers: Headers;
}

export const getDeleteTaskUrl = (id: string,) => {


  return `http://mvp-ecs-alb-1788440207.us-east-1.elb.amazonaws.com:3000/tasks/${id}`
}

export const deleteTask = async (id: string, options?: RequestInit): Promise<deleteTaskResponse> => {
  
  const res = await fetch(getDeleteTaskUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}


/**
 * Complete task
 */
export type completeTaskResponse = {
  data: CompleteTask200;
  status: number;
  headers: Headers;
}

export const getCompleteTaskUrl = (id: string,) => {


  return `http://mvp-ecs-alb-1788440207.us-east-1.elb.amazonaws.com:3000/tasks/${id}/complete`
}

export const completeTask = async (id: string, options?: RequestInit): Promise<completeTaskResponse> => {
  
  const res = await fetch(getCompleteTaskUrl(id),
  {      
    ...options,
    method: 'PATCH'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}


